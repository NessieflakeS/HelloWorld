function startNumberGame() {
    const secretNumber = Math.floor(Math.random() * 100) + 1;
    let attempts = 0;
    
    alert("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!");
    
    while(true) {
      const guess = parseInt(prompt("–í–≤–µ–¥–∏ —Å–≤–æ—é –¥–æ–≥–∞–¥–∫—É:"));
      
      if(isNaN(guess)) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ!");
        continue;
      }
      
      attempts++;
      
      if(guess === secretNumber) {
        alert(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫.`);
        break;
      } else if(guess < secretNumber) {
        alert("–ú–æ—ë —á–∏—Å–ª–æ –ë–û–õ–¨–®–ï —Ç–≤–æ–µ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë!");
      } else {
        alert("–ú–æ—ë —á–∏—Å–ª–æ –ú–ï–ù–¨–®–ï —Ç–≤–æ–µ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë!");
      }
    }
}


function getMinNumber(a, b) {
    if (a < b) {
      return a;
    } else {
      return b;
    }
}


function checkEvenOdd(num) {
    return num % 2 === 0 ? '–ß–∏—Å–ª–æ —á–µ—Ç–Ω–æ–µ' : '–ß–∏—Å–ª–æ –Ω–µ—á–µ—Ç–Ω–æ–µ';
}


function printSquare(number) {
  const square = number * number;
  console.log(square);
}


function checkAge() {
  const age = prompt('–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?');
  
  if (isNaN(age)) {
    alert('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ');
  } else if (age < 0) {
    alert('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
  } else if (age >= 0 && age <= 12) {
    alert('–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!');
  } else {
    alert('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
  }
}


function multiplyNumbers(a, b) {
  const numA = Number(a);
  const numB = Number(b);
  
  if (isNaN(numA) || isNaN(numB)) {
    return '–û–¥–Ω–æ –∏–ª–∏ –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–æ–º';
  }
  
  return numA * numB;
}


function calculateCube() {
  const userInput = prompt("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:");
  
  const number = parseFloat(userInput);
  
  if (isNaN(number)) {
    return '–ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º';
  }
  
  const cube = Math.pow(number, 3);
  return `${number} –≤ –∫—É–±–µ —Ä–∞–≤–Ω—è–µ—Ç—Å—è ${cube}`;
}

for (let i = 0; i <= 10; i++) {
  console.log(calculateCube(i));
}


const circle1 = {
  radius: 5,
  
  getArea() {
    return Math.PI * Math.pow(this.radius, 2);
  },
  
  getPerimeter() {
    return 2 * Math.PI * this.radius;
  }
};

const circle2 = {
  radius: 10,
  
  getArea() {
    return Math.PI * Math.pow(this.radius, 2);
  },
  
  getPerimeter() {
    return 2 * Math.PI * this.radius;
  }
};





