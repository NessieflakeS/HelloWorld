function startNumberGame() {
    const secretNumber = Math.floor(Math.random() * 100) + 1;
    let attempts = 0;
    
    alert("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!");
    
    while(true) {
      const guess = parseInt(prompt("–í–≤–µ–¥–∏ —Å–≤–æ—é –¥–æ–≥–∞–¥–∫—É:"));
      
      if(isNaN(guess)) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ!");
        continue;
      }
      
      attempts++;
      
      if(guess === secretNumber) {
        alert(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫.`);
        break;
      } else if(guess < secretNumber) {
        alert("–ú–æ—ë —á–∏—Å–ª–æ –ë–û–õ–¨–®–ï —Ç–≤–æ–µ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë!");
      } else {
        alert("–ú–æ—ë —á–∏—Å–ª–æ –ú–ï–ù–¨–®–ï —Ç–≤–æ–µ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë!");
      }
    }
}

function getRandomNumber(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function generateMathProblem() {
    const operations = ['+', '-', '*', '/'];
    const operation = operations[getRandomNumber(0, 3)];
    
    let num1, num2;
    
    switch(operation) {
        case '+':
            num1 = getRandomNumber(1, 50);
            num2 = getRandomNumber(1, 50);
            break;
        case '-':
            num1 = getRandomNumber(1, 50);
            num2 = getRandomNumber(1, num1); 
            break;
        case '*':
            num1 = getRandomNumber(1, 12);
            num2 = getRandomNumber(1, 12);
            break;
        case '/':
            num2 = getRandomNumber(1, 10);
            const multiplier = getRandomNumber(1, 10);
            num1 = num2 * multiplier; 
            break;
    }
    
    return {
        problem: `${num1} ${operation} ${num2}`,
        answer: eval(`${num1} ${operation} ${num2}`) 
    };
}

function startMathGame() {
    const problemData = generateMathProblem();
    const userAnswer = prompt(`–†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É: ${problemData.problem}`);
    
    if (userAnswer === null) {
        alert('–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
        return;
    }
    
    const parsedAnswer = parseFloat(userAnswer);
    
    if (isNaN(parsedAnswer)) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!');
        startMathGame();
        return;
    }

    if (Math.abs(parsedAnswer - problemData.answer) < 0.0001) {
        alert('–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!');
    } else {
        alert(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${problemData.answer}`);
    }
    
    if (confirm('–•–æ—Ç–∏—Ç–µ —Ä–µ—à–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞–¥–∞—á—É?')) {
        startMathGame();
    }
}

function reverseTextGame() {
    const userInput = prompt("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å:");
    
    if (userInput === null) {
        alert("–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
        return;
    }
    
    if (!userInput.trim()) {
        alert("–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç!");
        reverseTextGame(); 
        return;
    }
    
    const reversedText = userInput.split('').reverse().join('');
    alert(`–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç: ${reversedText}`);
    
    if (confirm("–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç?")) {
        reverseTextGame();
    }
}

function startQuiz() {
    const quiz = [
        {
            question: "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –Ω–µ–±–æ?",
            options: ["1. –ö—Ä–∞—Å–Ω—ã–π", "2. –°–∏–Ω–∏–π", "3. –ó–µ–ª–µ–Ω—ã–π"],
            correctAnswer: 2
        },
        {
            question: "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª–µ?",
            options: ["1. –®–µ—Å—Ç—å", "2. –°–µ–º—å", "3. –í–æ—Å–µ–º—å"],
            correctAnswer: 2
        },
        {
            question: "–°–∫–æ–ª—å–∫–æ —É —á–µ–ª–æ–≤–µ–∫–∞ –ø–∞–ª—å—Ü–µ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Ä—É–∫–µ?",
            options: ["1. –ß–µ—Ç—ã—Ä–µ", "2. –ü—è—Ç—å", "3. –®–µ—Å—Ç—å"],
            correctAnswer: 2
        }
    ];

    let score = 0;

    for (let i = 0; i < quiz.length; i++) {
        const currentQuestion = quiz[i];
        
        let questionText = `${currentQuestion.question}\n`;
        questionText += currentQuestion.options.join('\n');
        
        const userAnswer = prompt(questionText);
        
        if (userAnswer === null) {
            if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É?")) {
                alert(`–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –í–∞—à —Å—á–µ—Ç: ${score}/${quiz.length}`);
                return;
            } else {
                i--; 
                continue;
            }
        }
        
        const answerNumber = parseInt(userAnswer);
        
        if (isNaN(answerNumber) || answerNumber < 1 || answerNumber > 3) {
            alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ (1, 2 –∏–ª–∏ 3)");
            i--; 
            continue;
        }
        
        if (answerNumber === currentQuestion.correctAnswer) {
            score++;
            alert("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!");
        } else {
            alert(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${currentQuestion.correctAnswer}`);
        }
    }
    
    alert(`–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${score} –∏–∑ ${quiz.length}`);
    
    if (confirm("–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â–µ —Ä–∞–∑?")) {
        startQuiz();
    }
}

function rockPaper() {
    const choices = ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"];
    
    const userChoice = prompt("–í—ã–±–µ—Ä–∏—Ç–µ: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞?").toLowerCase();
    
    if (userChoice === null) {
        alert("–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
        return;
    }
    
    if (!choices.includes(userChoice)) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞");
        rockPaper(); 
        return;
    }
    
    const computerChoice = choices[Math.floor(Math.random() * 3)];
    
    let result;
    
    if (userChoice === computerChoice) {
        result = "–ù–∏—á—å—è!";
    } else if (
        (userChoice === "–∫–∞–º–µ–Ω—å" && computerChoice === "–Ω–æ–∂–Ω–∏—Ü—ã") ||
        (userChoice === "–Ω–æ–∂–Ω–∏—Ü—ã" && computerChoice === "–±—É–º–∞–≥–∞") ||
        (userChoice === "–±—É–º–∞–≥–∞" && computerChoice === "–∫–∞–º–µ–Ω—å")
    ) {
        result = "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!";
    } else {
        result = "–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–±–µ–¥–∏–ª!";
    }
    
    alert(`
        –í–∞—à –≤—ã–±–æ—Ä: ${userChoice}
        –í—ã–±–æ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: ${computerChoice}
        –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}
    `);
    
    if (confirm("–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?")) {
        rockPaper();
    }
}

function startColorGame() {
    function getRandomColor() {
        const letters = '0123456789ABCDEF';
        let color = '#';
        for (let i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

    function changeBackgroundColor() {
        const randomColor = getRandomColor();
        document.body.style.backgroundColor = randomColor;
        
        const rgb = parseInt(randomColor.substring(1), 16);
        const r = (rgb >> 16) & 0xff;
        const g = (rgb >>  8) & 0xff;
        const b = (rgb >>  0) & 0xff;
        const luminance = 0.299 * r + 0.587 * g + 0.114 * b;
        
        const textColor = luminance > 128 ? '#000000' : '#FFFFFF';
        document.body.style.color = textColor;
        
        const buttons = document.querySelectorAll('button');
        buttons.forEach(button => {
            button.style.color = luminance > 128 ? '#000000' : '#FFFFFF';
            button.style.borderColor = luminance > 128 ? '#000000' : '#FFFFFF';
        });
        
        if (colorInfo) {
            colorInfo.textContent = `–¢–µ–∫—É—â–∏–π —Ü–≤–µ—Ç: ${randomColor}`;
            colorInfo.style.color = luminance > 128 ? '#000000' : '#FFFFFF';
            colorInfo.style.backgroundColor = luminance > 128 ? 'rgba(0, 0, 0, 0.1)' : 'rgba(255, 255, 255, 0.1)';
        }
    }

    const colorButton = document.createElement('button');
    colorButton.textContent = '–°–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç';
    colorButton.className = 'color-change-btn';
    colorButton.style.position = 'fixed';
    colorButton.style.bottom = '20px';
    colorButton.style.right = '20px';
    colorButton.style.padding = '10px 20px';
    colorButton.style.backgroundColor = 'rgba(255, 255, 255, 0.2)';
    colorButton.style.border = '1px solid';
    colorButton.style.borderRadius = '5px';
    colorButton.style.cursor = 'pointer';
    colorButton.style.zIndex = '1000';
    
    const colorInfo = document.createElement('div');
    colorInfo.className = 'color-info';
    colorInfo.style.position = 'fixed';
    colorInfo.style.bottom = '60px';
    colorInfo.style.right = '20px';
    colorInfo.style.padding = '5px 10px';
    colorInfo.style.borderRadius = '5px';
    colorInfo.style.zIndex = '1000';
    
    document.body.appendChild(colorButton);
    document.body.appendChild(colorInfo);
    
    colorButton.addEventListener('click', changeBackgroundColor);
    
    changeBackgroundColor();
    
    const closeButton = document.createElement('button');
    closeButton.textContent = '–ó–∞–∫—Ä—ã—Ç—å';
    closeButton.style.position = 'fixed';
    closeButton.style.bottom = '20px';
    closeButton.style.left = '20px';
    closeButton.style.padding = '10px 20px';
    closeButton.style.backgroundColor = 'rgba(255, 255, 255, 0.2)';
    closeButton.style.border = '1px solid';
    closeButton.style.borderRadius = '5px';
    closeButton.style.cursor = 'pointer';
    closeButton.style.zIndex = '1000';
    
    closeButton.addEventListener('click', function() {
        document.body.removeChild(colorButton);
        document.body.removeChild(colorInfo);
        document.body.removeChild(closeButton);
        document.body.style.backgroundColor = '';
        document.body.style.color = '';
        const buttons = document.querySelectorAll('button');
        buttons.forEach(button => {
            button.style.color = '';
            button.style.borderColor = '';
        });
    });
    
    document.body.appendChild(closeButton);
}
